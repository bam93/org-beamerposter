#+TITLE: Org Beamerposter

* Beamer Poster Setup File

| [[file:img/poster-sc-snap.png]] | [[file:img/poster-d-snap.png]] |


#+HTML: <img src="img/poster-sc-snap.png" alt="Systemcrafter Styled Poster Snapshot" width="200" style="float:left;margin-right:10px;"><img src="img/poster-d-snap.png" alt="Donder Styled Poster Snapshot" width="200" style="float:left;">
#+HTML: <div style="clear:both;"></div>

This is a fork of an original beamer poster setup implementing a new
easily customizable style as shown in the image above, plus the
original style shown next to it. Below you will find two
sections. First, under *Legacy*, the original README. Then under
*Marc's add-ons* some detail on the changes and extensions I made for
my convenience, and that I hope may be useful for you, too.

In a nutshell:
- use a =Makefile= to automate the different steps
- provide easy customization of the style(s) using =yaml= and =mustache= files
- add (and focus on) a "Systemcrafter" style for the poster
- some helper script and some graphics for modifying the style

* Legacy
The beamer poster setup in this repository encapsulates most boilerplate required to get a nice Org -> Poster export.
It includes not only the necessary LaTeX headers and Org Mode options, but eventually will also include a set of useful macros to help defining things such as authors and affiliations.
To get it working, and to be able to correctly use the template provided, add the following to your init (or evaluate it before export):

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("landscape_poster_a1"
               "\\documentclass[t]{beamer}
           \\usepackage[orientation=landscape,size=a1,scale=1.25]{beamerposter}
           \\usepackage[absolute,overlay]{textpos}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(add-to-list 'org-latex-classes
             '("portrait_poster_a0"
               "\\documentclass[t]{beamer}
           \\usepackage[orientation=portrait,size=a0,scale=1.2,debug]{beamerposter}
           \\usepackage[absolute,overlay]{textpos}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_SRC

The defined class landscape_poster_a1 is meant to be compatible with both PdfLaTeX or XeLaTeX. The template locally redefines =org-latex-pdf-process= to ensure that the compilation works as expected.

** Beamer Fundamental Concepts

 Before jumping to Org functionality, however, users should be aware of Beamer's most important concepts: blocks and columns:

*** Blocks
 #+BEGIN_QUOTE
 Beamer has the concept of block, a set of text that is logically together but apart from the rest of the text that may be in a slide (in our case, the poster is a slide). There are many types of blocks.
 #+END_QUOTE

 The concept of blocks is important because it allows us to change the display of, e.g., figures, math and references.

*** Columns

 #+BEGIN_QUOTE
 In a Beamer frame, you might need to present 2 or more groups of content (which may as well be blocks) beside each other. The columns environment of Beamer can be used to achieve this by subdividing the frame into columns.The columns also have widths. By default, these widths are the proportion of the page width to use so I have specified 40% for the left column and 60% for the right one. 
 #+END_QUOTE


** Using Org Mode with Beamer

To tell Org Mode that an org file consists of source code for a beamer presentation (org poster), we have to set a startup command somewhere (usually at the beginning) of our file:

#+BEGIN_SRC org
#+STARTUP: beamer
#+END_SRC

Press =C-c C-c= on top of the STARTUP line to activate beamer Org mode the first time you write the line down. This will have the effect of changing a couple of keybindings, e.g., =C-c C-b=, which usually runs the command =org-backward-heading-same-level=, will run =org-beamer-select-environment=. 

Needless to say, Org Mode offers multiple features to aid the construction of beamer presentations. These features include not only Beamer specific keybindings but also special column views to display the structure and elements of the presentation (or poster) without getting lost in details, and a specific latex export command for beamer presentations.
Besides the full documentation [[https://orgmode.org/manual/Beamer-export.html#Beamer-export][here]], a short documentation can be found [[https://orgmode.org/worg/exporters/beamer/tutorial.html][here]]. Read on for an even shorter overview of the fundamentals.

** Beamer specific markup for Org Mode

Org mode will understand that a heading is of a given *block* type by reading the ~BEAMER_env~ property of a heading. Instead of manually typing the environment type, simply press =C-c C-b= to open a menu with further shortcuts.

Here's a list of some of the available environments:

#+BEGIN_SRC emacs-lisp :eval never
(mapcar 'car org-beamer-environments-default)
#+END_SRC

#+RESULTS:
| block | alertblock | verse | quotation | quote | structureenv | theorem | definition | example | exampleblock | proof | beamercolorbox |

Setting the environment block with =org-beamer-select-environment= will not only add or update the correct the heading's ~BEAMER_env~ property, but also add a tag named ~B_environment~ that is helpful for the overview display (described further down). If a block environment accepts environment specific arguments, they can be defined manually by setting the property ~BEAMER_envargs~. 

The same interface introduced for defining blocks also enables the definition of columns. Use the option ~|~ (vertical slash) to define a column, i.e., =C-c C-b |=. Setting the column with =org-beamer-select-environment= will not only add or update the correct the heading's ~BEAMER_col~ property, but also add a tag named ~BMCOL~.

Columns also have widths, which are given as a proportion of the total frame size. For example, a column width of 0.4 means that a given column will ocupy 40% of the frame. 

*Note that Org Mode will not keep track of the sum of your column sizes. If your columns add to a value greater than 1, then the export will probably break.**

*** Specific poster structure

Taken from the documentation [[https://orgmode.org/manual/Sectioning-Frames-and-Blocks-in-Beamer.html][here]]:

#+BEGIN_QUOTE
Org transforms heading levels into Beamerâ€™s sectioning elements, frames and blocks.
Org overrides headlines to frames conversion for the current tree of an Org file if it encounters the BEAMER_ENV property set to frame or fullframe. In Beamer terminology, a fullframe is a frame without its title.
#+END_QUOTE

Because a poster should only have a single frame, we define the poster as a single top level heading with property ~BEAMER_env~ set to ~fullframe~. We then define the number of columns we want to have as 2nd level headings. Finally, each row block is defined as a 3rd level heading. Deeper levels can be used to structure each row element, as in, e.g., dividing subcolumns or subrows for text and figure.

** Column view for block customisation

Org Mode's column view is not a beamer specific feature, but it can be tuned for beamer with the following line of code:

#+BEGIN_SRC org
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+END_SRC

 This incantation defines the format for viewing org property information in [[https://orgmode.org/worg/org-tutorials/org-column-view-tutorial.html][column mode]]. This mode allows you to easily adjust the values of the properties for any headline in your document. To see column view press =C-c C-x C-c=.
To quit, place the cursor on top of any heading and press =q=.


* Marc's add-ons
** Directory reconfiguration
I tried to logically subdivide into directories as follows:
- =script=: helper scripts
- =img=: images and logos
- =config=: configuration-related files
- =styles=: style-related settings and templates
- =org-src=: the contents for the poster in org-mode syntax
- =tex=: directory where the =.tex= file is created and the =.pdf=
  generation takes places, also contains all intermediate files. You
  also need to position any bibliographic references in a
  =Publications.bib= file in that subdirectory
  
** Overall process
1. Generate your style via =make style=
2. Generate the style sidebar (if used) via =make logo=
3. Edit your =org-src/template.org= file
   1. see about Emacs usage/shortcuts in the =Legacy= section
4. From within Emacs, generate the =.tex= file via =C-e l b=
5. Generate the =.pdf= files via =make gen=
6. Admire your beautiful poster with =make v=
7. Cleanup intermediate files with =make clean=
8. Start over with =make distclean=

** Configurable styles
I tried to generate the original template by extracting the variables
I thought I'd likely want to change and putting them into a =yaml=
config file. For the original style this has become
=styles/donder-config.yml=. These values are filled in the
corresponding mustache template
=styles/donder-beamertheme.mustache=. Such settings are defined in
=config/env= via the =MYSTYLE= value. Right now the =donder= and the
=systemcrafter= style are provided.

This was the first step to implement the Systemcrafter's inspired
style defined by the couple =styles/systemcrafter-config.yml= and
=styles/systemcrafter-beamertheme.mustache=. You can easily play with
the =.yml= file to change colors for instance.

To generate the style (based on your configuration settings), execute
the Makefile target =make style=.

** =logo_tiler.py= for the sidebar logo
The original repo had a colored bar on the left side, coherent with
the original "Donder" style. I wanted to replace that by an
image-based side-bar without changing too much the structure of the
template and delving into beamer config. To achieve this, several
images of different sizes are needed for the side-bar. They are
generated from a vertically seamlessly tiled base image with this
script.

In its present state this is an ultra-simple script and the base
filename is hardcoded as =img/circuit1t.png= (the =t= is so I recall
this image should be vertically tile-able). The script generates four
image files =tiled_xxx.png=, where xxx is a number representing the
height of the image.

Run the script using the =make logo= Makefile target.

** Known issues
The tex runs formally end with an error, despite the =.pdf= file being
properly generated. This seems more like a PDFLatex/Latexmk/Lualatex
incompatibility and I haven't yet been able to sort it out.
